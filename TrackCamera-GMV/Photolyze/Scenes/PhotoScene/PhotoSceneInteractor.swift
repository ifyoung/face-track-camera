//
//  PhotoSceneInteractor.swift
//  Photolyze
//
//  Created by Mac on 05.09.2019.
//  Copyright (c) 2019 Lammax. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PhotoSceneBusinessLogic {
    func storePhoto(request: PhotoScene.StorePhoto.Request)
    func storeCall(request: PhotoScene.StoreCall.Request)
}

protocol PhotoSceneDataStore {
    var currentFilteredPhoto: CIImage? { get set }
}

class PhotoSceneInteractor: PhotoSceneDataStore {
    
    var presenter: PhotoScenePresentationLogic?
    var worker: PhotoSceneWorker?
    
    private let context = CIContext()
    
    //MARK: DataStore
    var currentFilteredPhoto: CIImage?
    
    // MARK: Do local stuff
    
    var isClickShoot = false
    
}

extension PhotoSceneInteractor: PhotoSceneBusinessLogic {
    
    func storePhoto(request: PhotoScene.StorePhoto.Request) {
        var message: String? {
            didSet {
                let response = PhotoScene.StoreCall.Response(message: message)
                self.presenter?.presentSavePhoto(response: response)
            }
        }
        if(self.isClickShoot){//点击了才执行，r不然执行太频繁，会崩溃
            self.currentFilteredPhoto = request.image
            if(self.currentFilteredPhoto != nil){
                if let ciImage = self.currentFilteredPhoto,
                    let cgImage = self.context.createCGImage(ciImage, from: ciImage.extent) {
                    let filteredImage = UIImage(cgImage: cgImage, scale: 1.0, orientation: .right)
                    self.worker?.save(maybeImage: filteredImage) { msg in
                        message = msg
                    }
                } else {
                    message = "No image to save in album"
                }
                self.currentFilteredPhoto = nil
                self.isClickShoot = false
            }
            
            //                   let response = PhotoScene.StorePhoto.Response()
            //                   self.presenter?.presentStorePhoto(response: response)
//            self.isClickShoot = false//在赋值后重置，不然速度太快又会有值进来,放在判断吗里面重置？？？
        }
        
    }
    
    func storeCall(request: PhotoScene.StoreCall.Request) {
        self.isClickShoot = true
    }
    
    
}
